#! /bin/bash
#  Cloudgene Daemon

### BEGIN INIT INFO
# Provides:          mydaemon
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Short-Description: Starts the MyDaemon service
# Description:       This file is used to start the daemon
#                    and should be placed in /etc/init.d
### END INIT INFO

# Author:   LF and SS
# Url:      cloudgene.uibk.ac.at
# Date:     2015

NAME="cloudgene"
DESC="Cloudgene Webservice"

# can also be set from command line
user=hadoop

# The path to jsvc
EXEC=`which jsvc`

# The path to the folder containing MyDaemon.jar
FILE_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Hadoop path with all jars
HADOOP_CLASS_PATH=`hadoop classpath`

# set JAVA PATH
JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")

# Our classpath including our jar file
CLASS_PATH="$FILE_PATH/cloudgene.jar:$HADOOP_CLASS_PATH"

# The fully qualified name of the class to execute
CLASS="cloudgene.mapred.Main"


# The file that will contain our process identification number (pid) for other scripts/programs that need to access it.
PID="/var/run/$NAME.pid"

# System.out writes to this file...
LOG_OUT="$FILE_PATH/log/$NAME.out"

# System.err writes to this file...
LOG_ERR="$FILE_PATH/err/$NAME.err"


# display the script usage
function usage {
  echo "Cloudgene as a Daemon"
  echo "Available actions : status, start/stop/restart"
  echo "Usage :"
  echo "   sudo $NAME -a start -u <user>"

}

# APP running
function is_app_running {


  JSVC_PID_FILE="/var/run/$NAME.pid"
  if [[ -s $JSVC_PID_FILE ]]; then
    PID=`cat $JSVC_PID_FILE`
    ps "$PID" > /dev/null
    if [[ $? -eq 0 ]]; then
      log "Application is running with pid $PID"
      return 0
    else
      log "Application is not running"
      rm -f $JSVC_PID_FILE
      return 1
    fi
  else
    log "Application is not running"
    return 1    
  fi
}

# log (echo) the given message only if we are not in the "quiet" mode
function log {
  if [[ ! $QUIET && -n $1 ]]; then
    if [[ $PRINT_TIME ]]; then
      TIME=`date +%T.%2N`" "
    else
      TIME=""
    fi
    echo "$TIME$1"
  fi
}


jsvc_exec() 
{   
    cd $FILE_PATH
    $EXEC -cwd $FILE_PATH -home $JAVA_HOME -cp $CLASS_PATH -outfile $LOG_OUT -debug -user $user -errfile $LOG_ERR -pidfile $PID $1 $CLASS $ARGS
}


while getopts ":a:u:j:" opt; do
  case $opt in
 a)
      ACTION=$OPTARG
      ;;
    u)
       echo "-u was triggered, Parameter: $OPTARG" >&2
       user=$OPTARG
      ;;
    j)
       echo "-j was triggered, Parameter: $OPTARG" >&2
       JAVA_HOME=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
    *)
      echo "Option -$OPTARG requires an argument."
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      usage
      exit 1
      ;;
  esac
done

case "$ACTION" in
    start)
       
 		if is_app_running; then
  			  log "Application is already running, not starting it"
	
		else
			

            echo "Starting the $DESC..."        
        
            # Start the service
            jsvc_exec
        
            echo "The $DESC has started."
        fi
    ;;
    stop)
        if [ -f "$PID" ]; then
            echo "Stopping the $DESC..."
        
            # Stop the service
            jsvc_exec "-stop"       
        
            echo "The $DESC has stopped."
        else
            echo "Daemon not running, no action taken"
            exit 1
        fi
    ;;
    restart)
        if [ -f "$PID" ]; then
            
            echo "Restarting the $DESC..."
            
            # Stop the service
            jsvc_exec "-stop"
            
            # Start the service
            jsvc_exec
            
            echo "The $DESC has restarted."
        else
            echo "Daemon not running, no action taken"
            exit 1
        fi
            ;;
 status) 
    is_app_running
    ;;
	*)
    echo "Usage: $NAME {start|stop|restart}" >&2
    exit 3
    ;;
esac